name: Build and Deploy to AKS

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'charts/**'
      - 'infra/**'
  workflow_dispatch:

concurrency:
  group: terraform-apply
  cancel-in-progress: true

env:
  CHART_PATH: "./charts/fullstack"
  CHART_OVERRIDE_PATH: "./charts/values-prod.yaml"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.filter.outputs.app }}
      charts_changed: ${{ steps.filter.outputs.charts }}
      infra_changed: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            app:
              - 'app/**'
            charts:
              - 'charts/**'
            infra:
              - 'infra/**'

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    needs: detect-changes
    if: needs.detect-changes.outputs.infra_changed == 'true'
    outputs:
      ACR_NAME: ${{ steps.set-outputs.outputs.ACR_NAME }}
      AKS_NAME: ${{ steps.set-outputs.outputs.AKS_NAME }}
      RG_NAME: ${{ steps.set-outputs.outputs.RG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          cd ./infra
          terraform init

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd ./infra
          terraform apply -auto-approve -input=false \
          -var "owner_email_address=${{ secrets.EMAIL_ADDRESS }}"

      - name: Capture Terraform Outputs
        id: set-outputs
        run: |
          cd ./infra
          echo "ACR_NAME=$(terraform output -raw prod_acr)" >> $GITHUB_OUTPUT
          echo "AKS_NAME=$(terraform output -raw prod_aks_cluster_name)" >> $GITHUB_OUTPUT
          echo "RG_NAME=$(terraform output -raw prod_resource_group)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform]
    if: needs.detect-changes.outputs.app_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name ${{ needs.terraform.outputs.ACR_NAME }}

      - name: Build & push frontend image
        run: |
          cd app/frontend
          IMAGE_TAG=${{ needs.terraform.outputs.ACR_NAME }}.azurecr.io/frontend:${GITHUB_SHA}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Build & push backend image
        run: |
          cd app/backend
          IMAGE_TAG=${{ needs.terraform.outputs.ACR_NAME }}.azurecr.io/backend:${GITHUB_SHA}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, build, terraform]
    if: needs.detect-changes.outputs.charts_changed == 'true' || needs.detect-changes.outputs.app_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ needs.terraform.outputs.RG_NAME }}
          cluster-name: ${{ needs.terraform.outputs.AKS_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Bake Helm chart
        uses: azure/k8s-bake@v2
        with:
          renderEngine: helm
          helmChart: ${{ env.CHART_PATH }}
          overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
          overrides: |
            frontend.image.repository=${{ needs.terraform.outputs.ACR_NAME }}.azurecr.io/frontend
            frontend.image.tag=${GITHUB_SHA}
            backend.image.repository=${{ needs.terraform.outputs.ACR_NAME }}.azurecr.io/backend
            backend.image.tag=${GITHUB_SHA}
          helm-version: latest
        id: bake

      - name: Deploy application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{ needs.terraform.outputs.ACR_NAME }}.azurecr.io/frontend:${GITHUB_SHA}
            ${{ needs.terraform.outputs.ACR_NAME }}.azurecr.io/backend:${GITHUB_SHA}
